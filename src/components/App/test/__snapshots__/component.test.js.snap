// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App|Component should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Component
    board={
      Array [
        "X",
        "O",
        "X",
        null,
        null,
        "X",
        "O",
        null,
        null,
      ]
    }
    computer={
      Object {
        "isComputer": true,
        "name": "computer",
        "piece": "X",
      }
    }
    computerPlay={[Function]}
    currentPlayer={
      Object {
        "isComputer": false,
        "name": "test",
        "piece": "O",
      }
    }
    handlePlay={[Function]}
    history={
      Array [
        Object {
          "id": 1,
          "winner": Object {
            "isComputer": false,
            "name": "test",
            "piece": "O",
          },
        },
        Object {
          "id": 2,
          "winner": Object {
            "isComputer": true,
            "name": "computer",
            "piece": "X",
          },
        },
        Object {
          "id": 3,
          "winner": Object {
            "isComputer": false,
            "name": "test",
            "piece": "O",
          },
        },
        Object {
          "id": 4,
        },
      ]
    }
    onClick={[Function]}
    player={
      Object {
        "isComputer": false,
        "name": "test",
        "piece": "O",
      }
    }
    startGame={[Function]}
    status="GAME_OVER"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Grid)
          item={true}
        >
          <Header
            player={
              Object {
                "isComputer": false,
                "name": "test",
                "piece": "O",
              }
            }
          >
            <HeaderLeft>
              TicTacToe
            </HeaderLeft>
            <HeaderRight>
              <StartButton
                onClick={[Function]}
                status="GAME_OVER"
              />
            </HeaderRight>
          </Header>
        </WithStyles(Grid)>,
        <WithStyles(Grid)
          item={true}
        >
          <WithStyles(Grid)
            alignItems="center"
            container={true}
            direction="row"
            justify="space-around"
            wrap="nowrap"
          >
            <WithStyles(Grid)
              item={true}
            >
              <WithStyles(ChartPanel)
                history={
                  Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ]
                }
              />
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
            >
              <WithStyles(BoardPanel)
                board={
                  Array [
                    "X",
                    "O",
                    "X",
                    null,
                    null,
                    "X",
                    "O",
                    null,
                    null,
                  ]
                }
                currentPlayer={
                  Object {
                    "isComputer": false,
                    "name": "test",
                    "piece": "O",
                  }
                }
                onClick={[Function]}
                status="GAME_OVER"
              />
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
            >
              <HistoryPanel
                history={
                  Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ]
                }
              />
            </WithStyles(Grid)>
          </WithStyles(Grid)>
        </WithStyles(Grid)>,
      ],
      "container": true,
      "direction": "column",
      "justify": "space-around",
      "spacing": 40,
      "wrap": "nowrap",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Header
            player={
              Object {
                "isComputer": false,
                "name": "test",
                "piece": "O",
              }
            }
          >
            <HeaderLeft>
              TicTacToe
            </HeaderLeft>
            <HeaderRight>
              <StartButton
                onClick={[Function]}
                status="GAME_OVER"
              />
            </HeaderRight>
          </Header>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <HeaderLeft>
                TicTacToe
              </HeaderLeft>,
              <HeaderRight>
                <StartButton
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </HeaderRight>,
            ],
            "player": Object {
              "isComputer": false,
              "name": "test",
              "piece": "O",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "TicTacToe",
              },
              "ref": null,
              "rendered": "TicTacToe",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <StartButton
                  onClick={[Function]}
                  status="GAME_OVER"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onClick": [Function],
                  "status": "GAME_OVER",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Grid)
            alignItems="center"
            container={true}
            direction="row"
            justify="space-around"
            wrap="nowrap"
          >
            <WithStyles(Grid)
              item={true}
            >
              <WithStyles(ChartPanel)
                history={
                  Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ]
                }
              />
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
            >
              <WithStyles(BoardPanel)
                board={
                  Array [
                    "X",
                    "O",
                    "X",
                    null,
                    null,
                    "X",
                    "O",
                    null,
                    null,
                  ]
                }
                currentPlayer={
                  Object {
                    "isComputer": false,
                    "name": "test",
                    "piece": "O",
                  }
                }
                onClick={[Function]}
                status="GAME_OVER"
              />
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
            >
              <HistoryPanel
                history={
                  Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ]
                }
              />
            </WithStyles(Grid)>
          </WithStyles(Grid)>,
          "item": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "alignItems": "center",
            "children": Array [
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(ChartPanel)
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>,
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(BoardPanel)
                  board={
                    Array [
                      "X",
                      "O",
                      "X",
                      null,
                      null,
                      "X",
                      "O",
                      null,
                      null,
                    ]
                  }
                  currentPlayer={
                    Object {
                      "isComputer": false,
                      "name": "test",
                      "piece": "O",
                    }
                  }
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </WithStyles(Grid)>,
              <WithStyles(Grid)
                item={true}
              >
                <HistoryPanel
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>,
            ],
            "container": true,
            "direction": "row",
            "justify": "space-around",
            "wrap": "nowrap",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(ChartPanel)
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />,
                "item": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "history": Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(BoardPanel)
                  board={
                    Array [
                      "X",
                      "O",
                      "X",
                      null,
                      null,
                      "X",
                      "O",
                      null,
                      null,
                    ]
                  }
                  currentPlayer={
                    Object {
                      "isComputer": false,
                      "name": "test",
                      "piece": "O",
                    }
                  }
                  onClick={[Function]}
                  status="GAME_OVER"
                />,
                "item": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "board": Array [
                    "X",
                    "O",
                    "X",
                    null,
                    null,
                    "X",
                    "O",
                    null,
                    null,
                  ],
                  "currentPlayer": Object {
                    "isComputer": false,
                    "name": "test",
                    "piece": "O",
                  },
                  "onClick": [Function],
                  "status": "GAME_OVER",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <HistoryPanel
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />,
                "item": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "history": Array [
                    Object {
                      "id": 1,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 2,
                      "winner": Object {
                        "isComputer": true,
                        "name": "computer",
                        "piece": "X",
                      },
                    },
                    Object {
                      "id": 3,
                      "winner": Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      },
                    },
                    Object {
                      "id": 4,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Grid)
            item={true}
          >
            <Header
              player={
                Object {
                  "isComputer": false,
                  "name": "test",
                  "piece": "O",
                }
              }
            >
              <HeaderLeft>
                TicTacToe
              </HeaderLeft>
              <HeaderRight>
                <StartButton
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </HeaderRight>
            </Header>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
          >
            <WithStyles(Grid)
              alignItems="center"
              container={true}
              direction="row"
              justify="space-around"
              wrap="nowrap"
            >
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(ChartPanel)
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(BoardPanel)
                  board={
                    Array [
                      "X",
                      "O",
                      "X",
                      null,
                      null,
                      "X",
                      "O",
                      null,
                      null,
                    ]
                  }
                  currentPlayer={
                    Object {
                      "isComputer": false,
                      "name": "test",
                      "piece": "O",
                    }
                  }
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
              >
                <HistoryPanel
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>
            </WithStyles(Grid)>
          </WithStyles(Grid)>,
        ],
        "container": true,
        "direction": "column",
        "justify": "space-around",
        "spacing": 40,
        "wrap": "nowrap",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Header
              player={
                Object {
                  "isComputer": false,
                  "name": "test",
                  "piece": "O",
                }
              }
            >
              <HeaderLeft>
                TicTacToe
              </HeaderLeft>
              <HeaderRight>
                <StartButton
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </HeaderRight>
            </Header>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <HeaderLeft>
                  TicTacToe
                </HeaderLeft>,
                <HeaderRight>
                  <StartButton
                    onClick={[Function]}
                    status="GAME_OVER"
                  />
                </HeaderRight>,
              ],
              "player": Object {
                "isComputer": false,
                "name": "test",
                "piece": "O",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "TicTacToe",
                },
                "ref": null,
                "rendered": "TicTacToe",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <StartButton
                    onClick={[Function]}
                    status="GAME_OVER"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "onClick": [Function],
                    "status": "GAME_OVER",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Grid)
              alignItems="center"
              container={true}
              direction="row"
              justify="space-around"
              wrap="nowrap"
            >
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(ChartPanel)
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
              >
                <WithStyles(BoardPanel)
                  board={
                    Array [
                      "X",
                      "O",
                      "X",
                      null,
                      null,
                      "X",
                      "O",
                      null,
                      null,
                    ]
                  }
                  currentPlayer={
                    Object {
                      "isComputer": false,
                      "name": "test",
                      "piece": "O",
                    }
                  }
                  onClick={[Function]}
                  status="GAME_OVER"
                />
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
              >
                <HistoryPanel
                  history={
                    Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ]
                  }
                />
              </WithStyles(Grid)>
            </WithStyles(Grid)>,
            "item": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "alignItems": "center",
              "children": Array [
                <WithStyles(Grid)
                  item={true}
                >
                  <WithStyles(ChartPanel)
                    history={
                      Array [
                        Object {
                          "id": 1,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 2,
                          "winner": Object {
                            "isComputer": true,
                            "name": "computer",
                            "piece": "X",
                          },
                        },
                        Object {
                          "id": 3,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 4,
                        },
                      ]
                    }
                  />
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                >
                  <WithStyles(BoardPanel)
                    board={
                      Array [
                        "X",
                        "O",
                        "X",
                        null,
                        null,
                        "X",
                        "O",
                        null,
                        null,
                      ]
                    }
                    currentPlayer={
                      Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      }
                    }
                    onClick={[Function]}
                    status="GAME_OVER"
                  />
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                >
                  <HistoryPanel
                    history={
                      Array [
                        Object {
                          "id": 1,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 2,
                          "winner": Object {
                            "isComputer": true,
                            "name": "computer",
                            "piece": "X",
                          },
                        },
                        Object {
                          "id": 3,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 4,
                        },
                      ]
                    }
                  />
                </WithStyles(Grid)>,
              ],
              "container": true,
              "direction": "row",
              "justify": "space-around",
              "wrap": "nowrap",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(ChartPanel)
                    history={
                      Array [
                        Object {
                          "id": 1,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 2,
                          "winner": Object {
                            "isComputer": true,
                            "name": "computer",
                            "piece": "X",
                          },
                        },
                        Object {
                          "id": 3,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 4,
                        },
                      ]
                    }
                  />,
                  "item": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "history": Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(BoardPanel)
                    board={
                      Array [
                        "X",
                        "O",
                        "X",
                        null,
                        null,
                        "X",
                        "O",
                        null,
                        null,
                      ]
                    }
                    currentPlayer={
                      Object {
                        "isComputer": false,
                        "name": "test",
                        "piece": "O",
                      }
                    }
                    onClick={[Function]}
                    status="GAME_OVER"
                  />,
                  "item": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "board": Array [
                      "X",
                      "O",
                      "X",
                      null,
                      null,
                      "X",
                      "O",
                      null,
                      null,
                    ],
                    "currentPlayer": Object {
                      "isComputer": false,
                      "name": "test",
                      "piece": "O",
                    },
                    "onClick": [Function],
                    "status": "GAME_OVER",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <HistoryPanel
                    history={
                      Array [
                        Object {
                          "id": 1,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 2,
                          "winner": Object {
                            "isComputer": true,
                            "name": "computer",
                            "piece": "X",
                          },
                        },
                        Object {
                          "id": 3,
                          "winner": Object {
                            "isComputer": false,
                            "name": "test",
                            "piece": "O",
                          },
                        },
                        Object {
                          "id": 4,
                        },
                      ]
                    }
                  />,
                  "item": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "history": Array [
                      Object {
                        "id": 1,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 2,
                        "winner": Object {
                          "isComputer": true,
                          "name": "computer",
                          "piece": "X",
                        },
                      },
                      Object {
                        "id": 3,
                        "winner": Object {
                          "isComputer": false,
                          "name": "test",
                          "piece": "O",
                        },
                      },
                      Object {
                        "id": 4,
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
