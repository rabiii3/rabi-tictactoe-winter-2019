// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BoardPanel should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WithStyles(BoardPanel)
    board={
      Array [
        null,
        "x",
        "o",
      ]
    }
    currentPlayer={
      Object {
        "isComputer": false,
        "name": "nodejs",
        "piece": "o",
      }
    }
    onClick={[Function]}
    status="GAME_STARTED"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "board": Array [
        null,
        "x",
        "o",
      ],
      "classes": Object {
        "container": "BoardPanel-container-1",
        "square": "BoardPanel-square-2",
      },
      "currentPlayer": Object {
        "isComputer": false,
        "name": "nodejs",
        "piece": "o",
      },
      "onClick": [Function],
      "status": "GAME_STARTED",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "board": Array [
          null,
          "x",
          "o",
        ],
        "classes": Object {
          "container": "BoardPanel-container-1",
          "square": "BoardPanel-square-2",
        },
        "currentPlayer": Object {
          "isComputer": false,
          "name": "nodejs",
          "piece": "o",
        },
        "onClick": [Function],
        "status": "GAME_STARTED",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
